// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

import 'package:flutter_recorder/src/enums.dart';
import 'package:flutter_recorder/src/filters/filters.dart';

/// Bindings for `src/flutter_recorder.h`.
///
/// Regenerate bindings with
/// `dart run ffigen --config ffigen.yaml`
/// or
/// `export CPATH="$(clang -v 2>&1 | grep "Selected GCC installation" | rev | cut -d' ' -f1 | rev)/include";  dart run ffigen --config ffigen.yaml`
///
class FlutterRecorderBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterRecorderBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterRecorderBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void flutter_recorder_createWorkerInWasm() {
    return _flutter_recorder_createWorkerInWasm();
  }

  late final _flutter_recorder_createWorkerInWasmPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'flutter_recorder_createWorkerInWasm');
  late final _flutter_recorder_createWorkerInWasm =
      _flutter_recorder_createWorkerInWasmPtr.asFunction<void Function()>();

  void flutter_recorder_setDartEventCallback(
    dartSilenceChangedCallback_t silence_changed_callback,
    dartStreamDataCallback_t stream_data_callback,
  ) {
    return _flutter_recorder_setDartEventCallback(
      silence_changed_callback,
      stream_data_callback,
    );
  }

  late final _flutter_recorder_setDartEventCallbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  dartSilenceChangedCallback_t, dartStreamDataCallback_t)>>(
      'flutter_recorder_setDartEventCallback');
  late final _flutter_recorder_setDartEventCallback =
      _flutter_recorder_setDartEventCallbackPtr.asFunction<
          void Function(
              dartSilenceChangedCallback_t, dartStreamDataCallback_t)>();

  void flutter_recorder_nativeFree(
    ffi.Pointer<ffi.Void> pointer,
  ) {
    return _flutter_recorder_nativeFree(
      pointer,
    );
  }

  late final _flutter_recorder_nativeFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'flutter_recorder_nativeFree');
  late final _flutter_recorder_nativeFree = _flutter_recorder_nativeFreePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void flutter_recorder_listCaptureDevices(
    ffi.Pointer<ffi.Pointer<ffi.Char>> devicesName,
    ffi.Pointer<ffi.Pointer<ffi.Int>> deviceId,
    ffi.Pointer<ffi.Pointer<ffi.Int>> isDefault,
    ffi.Pointer<ffi.Int> n_devices,
  ) {
    return _flutter_recorder_listCaptureDevices(
      devicesName,
      deviceId,
      isDefault,
      n_devices,
    );
  }

  late final _flutter_recorder_listCaptureDevicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Int>)>>('flutter_recorder_listCaptureDevices');
  late final _flutter_recorder_listCaptureDevices =
      _flutter_recorder_listCaptureDevicesPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Int>)>();

  void flutter_recorder_freeListCaptureDevices(
    ffi.Pointer<ffi.Pointer<ffi.Char>> devicesName,
    ffi.Pointer<ffi.Pointer<ffi.Int>> deviceId,
    ffi.Pointer<ffi.Pointer<ffi.Int>> isDefault,
    int n_devices,
  ) {
    return _flutter_recorder_freeListCaptureDevices(
      devicesName,
      deviceId,
      isDefault,
      n_devices,
    );
  }

  late final _flutter_recorder_freeListCaptureDevicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Int)>>('flutter_recorder_freeListCaptureDevices');
  late final _flutter_recorder_freeListCaptureDevices =
      _flutter_recorder_freeListCaptureDevicesPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              int)>();

  CaptureErrors flutter_recorder_init(
    int deviceID,
    int pcmFormat,
    int sampleRate,
    int channels,
  ) {
    return CaptureErrors.fromValue(_flutter_recorder_init(
      deviceID,
      pcmFormat,
      sampleRate,
      channels,
    ));
  }

  late final _flutter_recorder_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Int, ffi.Int, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('flutter_recorder_init');
  late final _flutter_recorder_init =
      _flutter_recorder_initPtr.asFunction<int Function(int, int, int, int)>();

  void flutter_recorder_deinit() {
    return _flutter_recorder_deinit();
  }

  late final _flutter_recorder_deinitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'flutter_recorder_deinit');
  late final _flutter_recorder_deinit =
      _flutter_recorder_deinitPtr.asFunction<void Function()>();

  int flutter_recorder_isInited() {
    return _flutter_recorder_isInited();
  }

  late final _flutter_recorder_isInitedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'flutter_recorder_isInited');
  late final _flutter_recorder_isInited =
      _flutter_recorder_isInitedPtr.asFunction<int Function()>();

  int flutter_recorder_isDeviceStarted() {
    return _flutter_recorder_isDeviceStarted();
  }

  late final _flutter_recorder_isDeviceStartedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'flutter_recorder_isDeviceStarted');
  late final _flutter_recorder_isDeviceStarted =
      _flutter_recorder_isDeviceStartedPtr.asFunction<int Function()>();

  CaptureErrors flutter_recorder_start() {
    return CaptureErrors.fromValue(_flutter_recorder_start());
  }

  late final _flutter_recorder_startPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'flutter_recorder_start');
  late final _flutter_recorder_start =
      _flutter_recorder_startPtr.asFunction<int Function()>();

  void flutter_recorder_stop() {
    return _flutter_recorder_stop();
  }

  late final _flutter_recorder_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('flutter_recorder_stop');
  late final _flutter_recorder_stop =
      _flutter_recorder_stopPtr.asFunction<void Function()>();

  void flutter_recorder_startStreamingData() {
    return _flutter_recorder_startStreamingData();
  }

  late final _flutter_recorder_startStreamingDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'flutter_recorder_startStreamingData');
  late final _flutter_recorder_startStreamingData =
      _flutter_recorder_startStreamingDataPtr.asFunction<void Function()>();

  void flutter_recorder_stopStreamingData() {
    return _flutter_recorder_stopStreamingData();
  }

  late final _flutter_recorder_stopStreamingDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'flutter_recorder_stopStreamingData');
  late final _flutter_recorder_stopStreamingData =
      _flutter_recorder_stopStreamingDataPtr.asFunction<void Function()>();

  void flutter_recorder_setSilenceDetection(
    bool enable,
  ) {
    return _flutter_recorder_setSilenceDetection(
      enable,
    );
  }

  late final _flutter_recorder_setSilenceDetectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'flutter_recorder_setSilenceDetection');
  late final _flutter_recorder_setSilenceDetection =
      _flutter_recorder_setSilenceDetectionPtr
          .asFunction<void Function(bool)>();

  void flutter_recorder_setSilenceThresholdDb(
    double silenceThresholdDb,
  ) {
    return _flutter_recorder_setSilenceThresholdDb(
      silenceThresholdDb,
    );
  }

  late final _flutter_recorder_setSilenceThresholdDbPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'flutter_recorder_setSilenceThresholdDb');
  late final _flutter_recorder_setSilenceThresholdDb =
      _flutter_recorder_setSilenceThresholdDbPtr
          .asFunction<void Function(double)>();

  void flutter_recorder_setSilenceDuration(
    double silenceDuration,
  ) {
    return _flutter_recorder_setSilenceDuration(
      silenceDuration,
    );
  }

  late final _flutter_recorder_setSilenceDurationPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'flutter_recorder_setSilenceDuration');
  late final _flutter_recorder_setSilenceDuration =
      _flutter_recorder_setSilenceDurationPtr
          .asFunction<void Function(double)>();

  void flutter_recorder_setSecondsOfAudioToWriteBefore(
    double secondsOfAudioToWriteBefore,
  ) {
    return _flutter_recorder_setSecondsOfAudioToWriteBefore(
      secondsOfAudioToWriteBefore,
    );
  }

  late final _flutter_recorder_setSecondsOfAudioToWriteBeforePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'flutter_recorder_setSecondsOfAudioToWriteBefore');
  late final _flutter_recorder_setSecondsOfAudioToWriteBefore =
      _flutter_recorder_setSecondsOfAudioToWriteBeforePtr
          .asFunction<void Function(double)>();

  CaptureErrors flutter_recorder_startRecording(
    ffi.Pointer<ffi.Char> path,
  ) {
    return CaptureErrors.fromValue(_flutter_recorder_startRecording(
      path,
    ));
  }

  late final _flutter_recorder_startRecordingPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>)>>(
      'flutter_recorder_startRecording');
  late final _flutter_recorder_startRecording =
      _flutter_recorder_startRecordingPtr
          .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void flutter_recorder_setPauseRecording(
    bool pause,
  ) {
    return _flutter_recorder_setPauseRecording(
      pause,
    );
  }

  late final _flutter_recorder_setPauseRecordingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'flutter_recorder_setPauseRecording');
  late final _flutter_recorder_setPauseRecording =
      _flutter_recorder_setPauseRecordingPtr.asFunction<void Function(bool)>();

  void flutter_recorder_stopRecording() {
    return _flutter_recorder_stopRecording();
  }

  late final _flutter_recorder_stopRecordingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'flutter_recorder_stopRecording');
  late final _flutter_recorder_stopRecording =
      _flutter_recorder_stopRecordingPtr.asFunction<void Function()>();

  void flutter_recorder_getVolumeDb(
    ffi.Pointer<ffi.Float> volumeDb,
  ) {
    return _flutter_recorder_getVolumeDb(
      volumeDb,
    );
  }

  late final _flutter_recorder_getVolumeDbPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Float>)>>(
          'flutter_recorder_getVolumeDb');
  late final _flutter_recorder_getVolumeDb = _flutter_recorder_getVolumeDbPtr
      .asFunction<void Function(ffi.Pointer<ffi.Float>)>();

  void flutter_recorder_getFft(
    ffi.Pointer<ffi.Pointer<ffi.Float>> fft,
    ffi.Pointer<ffi.Bool> isTheSameAsBefore,
  ) {
    return _flutter_recorder_getFft(
      fft,
      isTheSameAsBefore,
    );
  }

  late final _flutter_recorder_getFftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Float>>,
              ffi.Pointer<ffi.Bool>)>>('flutter_recorder_getFft');
  late final _flutter_recorder_getFft = _flutter_recorder_getFftPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Bool>)>();

  void flutter_recorder_getWave(
    ffi.Pointer<ffi.Pointer<ffi.Float>> wave,
    ffi.Pointer<ffi.Bool> isTheSameAsBefore,
  ) {
    return _flutter_recorder_getWave(
      wave,
      isTheSameAsBefore,
    );
  }

  late final _flutter_recorder_getWavePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Float>>,
              ffi.Pointer<ffi.Bool>)>>('flutter_recorder_getWave');
  late final _flutter_recorder_getWave =
      _flutter_recorder_getWavePtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Bool>)>();

  void flutter_recorder_getTexture(
    ffi.Pointer<ffi.Pointer<ffi.Float>> samples,
    ffi.Pointer<ffi.Bool> isTheSameAsBefore,
  ) {
    return _flutter_recorder_getTexture(
      samples,
      isTheSameAsBefore,
    );
  }

  late final _flutter_recorder_getTexturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Float>>,
              ffi.Pointer<ffi.Bool>)>>('flutter_recorder_getTexture');
  late final _flutter_recorder_getTexture =
      _flutter_recorder_getTexturePtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Bool>)>();

  void flutter_recorder_getTexture2D(
    ffi.Pointer<ffi.Pointer<ffi.Float>> samples,
    ffi.Pointer<ffi.Bool> isTheSameAsBefore,
  ) {
    return _flutter_recorder_getTexture2D(
      samples,
      isTheSameAsBefore,
    );
  }

  late final _flutter_recorder_getTexture2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Float>>,
              ffi.Pointer<ffi.Bool>)>>('flutter_recorder_getTexture2D');
  late final _flutter_recorder_getTexture2D =
      _flutter_recorder_getTexture2DPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Bool>)>();

  double flutter_recorder_getTextureValue(
    int row,
    int column,
  ) {
    return _flutter_recorder_getTextureValue(
      row,
      column,
    );
  }

  late final _flutter_recorder_getTextureValuePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Int)>>(
          'flutter_recorder_getTextureValue');
  late final _flutter_recorder_getTextureValue =
      _flutter_recorder_getTextureValuePtr
          .asFunction<double Function(int, int)>();

  void flutter_recorder_setFftSmoothing(
    double smooth,
  ) {
    return _flutter_recorder_setFftSmoothing(
      smooth,
    );
  }

  late final _flutter_recorder_setFftSmoothingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'flutter_recorder_setFftSmoothing');
  late final _flutter_recorder_setFftSmoothing =
      _flutter_recorder_setFftSmoothingPtr.asFunction<void Function(double)>();

  /// //////////////////////
  /// FILTERS
  /// //////////////////////
  int flutter_recorder_isFilterActive(
    RecorderFilterType filterType,
  ) {
    return _flutter_recorder_isFilterActive(
      filterType.value,
    );
  }

  late final _flutter_recorder_isFilterActivePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>(
          'flutter_recorder_isFilterActive');
  late final _flutter_recorder_isFilterActive =
      _flutter_recorder_isFilterActivePtr.asFunction<int Function(int)>();

  CaptureErrors flutter_recorder_addFilter(
    RecorderFilterType filterType,
  ) {
    return CaptureErrors.fromValue(_flutter_recorder_addFilter(
      filterType.value,
    ));
  }

  late final _flutter_recorder_addFilterPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'flutter_recorder_addFilter');
  late final _flutter_recorder_addFilter =
      _flutter_recorder_addFilterPtr.asFunction<int Function(int)>();

  CaptureErrors flutter_recorder_removeFilter(
    RecorderFilterType filterType,
  ) {
    return CaptureErrors.fromValue(_flutter_recorder_removeFilter(
      filterType.value,
    ));
  }

  late final _flutter_recorder_removeFilterPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'flutter_recorder_removeFilter');
  late final _flutter_recorder_removeFilter =
      _flutter_recorder_removeFilterPtr.asFunction<int Function(int)>();

  void flutter_recorder_getFilterParamNames(
    RecorderFilterType filterType,
    ffi.Pointer<ffi.Pointer<ffi.Char>> names,
    ffi.Pointer<ffi.Int> paramsCount,
  ) {
    return _flutter_recorder_getFilterParamNames(
      filterType.value,
      names,
      paramsCount,
    );
  }

  late final _flutter_recorder_getFilterParamNamesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('flutter_recorder_getFilterParamNames');
  late final _flutter_recorder_getFilterParamNames =
      _flutter_recorder_getFilterParamNamesPtr.asFunction<
          void Function(
              int, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void flutter_recorder_setFilterParams(
    RecorderFilterType filterType,
    int attributeId,
    double value,
  ) {
    return _flutter_recorder_setFilterParams(
      filterType.value,
      attributeId,
      value,
    );
  }

  late final _flutter_recorder_setFilterParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.Int,
              ffi.Float)>>('flutter_recorder_setFilterParams');
  late final _flutter_recorder_setFilterParams =
      _flutter_recorder_setFilterParamsPtr
          .asFunction<void Function(int, int, double)>();

  double flutter_recorder_getFilterParams(
    RecorderFilterType filterType,
    int attributeId,
  ) {
    return _flutter_recorder_getFilterParams(
      filterType.value,
      attributeId,
    );
  }

  late final _flutter_recorder_getFilterParamsPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.UnsignedInt, ffi.Int)>>(
          'flutter_recorder_getFilterParams');
  late final _flutter_recorder_getFilterParams =
      _flutter_recorder_getFilterParamsPtr
          .asFunction<double Function(int, int)>();
}

typedef dartSilenceChangedCallback_t
    = ffi.Pointer<ffi.NativeFunction<dartSilenceChangedCallback_tFunction>>;
typedef dartSilenceChangedCallback_tFunction = ffi.Void Function(
    ffi.Pointer<ffi.Bool>, ffi.Pointer<ffi.Float>);
typedef DartdartSilenceChangedCallback_tFunction = void Function(
    ffi.Pointer<ffi.Bool>, ffi.Pointer<ffi.Float>);
typedef dartStreamDataCallback_t
    = ffi.Pointer<ffi.NativeFunction<dartStreamDataCallback_tFunction>>;
typedef dartStreamDataCallback_tFunction = ffi.Void Function(
    ffi.Pointer<ffi.UnsignedChar> data, ffi.Int dataLength);
typedef DartdartStreamDataCallback_tFunction = void Function(
    ffi.Pointer<ffi.UnsignedChar> data, int dataLength);
